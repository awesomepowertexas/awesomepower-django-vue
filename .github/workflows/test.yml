name: test
on:
  - push

env:
  DATABASE_URL: postgres://awesomepower:awesomepower@localhost:5432/awesomepower
  DJANGO_DEBUG: "TRUE"
  DJANGO_SECRET_KEY: dev
  VITE_INSTRUMENT_CODE: "TRUE"

jobs:
  pytest:
    name: pytest
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13.4
        env:
          POSTGRES_DB: awesomepower
          POSTGRES_PASSWORD: awesomepower
          POSTGRES_USER: awesomepower
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          # Don't include patch number so we can leverage the cache
          # https://github.com/actions/setup-python#available-versions-of-python
          python-version: 3.9

      # https://www.peterbe.com/plog/install-python-poetry-github-actions-faster
      - name: Load cached ~/.local
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}-${{ hashFiles('.github/workflows/test.yml') }}

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cache-virtualenv
        uses: actions/cache@v2
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/test.yml') }}

      - name: Install poetry dependencies
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        working-directory: backend
        run: poetry install

      - name: Run pytest
        working-directory: backend
        run: poetry run pytest --cov-report=xml

      - name: Upload backend to Codecov
        if: ${{ always() }}
        uses: codecov/codecov-action@v2
        with:
          files: ./backend/coverage.xml
          fail_ci_if_error: true

  e2e:
    name: Cypress end-to-end tests
    runs-on: ubuntu-latest

    strategy:
      # https://github.com/cypress-io/github-action/issues/48
      fail-fast: false
      matrix:
        containers: [1, 2, 3, 4]

    services:
      postgres:
        image: postgres:13.4
        env:
          POSTGRES_DB: awesomepower
          POSTGRES_PASSWORD: awesomepower
          POSTGRES_USER: awesomepower
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          # Don't include patch number so we can leverage the cache
          # https://github.com/actions/setup-python#available-versions-of-python
          python-version: 3.9

      # https://www.peterbe.com/plog/install-python-poetry-github-actions-faster
      - name: Load cached ~/.local
        uses: actions/cache@v2
        with:
          path: ~/.local
          key: dotlocal-${{ runner.os }}-${{ hashFiles('.github/workflows/test.yml') }}

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cache-virtualenv
        uses: actions/cache@v2
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/test.yml') }}

      - name: Install poetry dependencies
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'
        working-directory: backend
        run: poetry install

      - name: Migrate database
        working-directory: backend
        run: poetry run python manage.py migrate

      - name: Start Django server
        working-directory: backend
        run: poetry run gunicorn awesomepower.wsgi:application --daemon

      - name: Cypress end-to-end tests
        uses: cypress-io/github-action@v2
        with:
          working-directory: web
          start: yarn dev
          wait-on: http://localhost:3000
          record: true
          parallel: true
        env:
          API_BASE_URL: http://localhost:8000
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload web to Codecov
        if: ${{ always() }}
        uses: codecov/codecov-action@v2
        with:
          files: ./web/coverage/coverage-final.json
          fail_ci_if_error: false # Coverage file may not exist
